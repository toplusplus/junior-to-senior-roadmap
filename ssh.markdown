# Introduction to SSH
## Common Protocols

**HTTP**: allows to send files over the web among clients and servers. HTML files, CSS files, JS files, etc.

**FTP**: allows to send files as well. Often used to upload files from your computer to hosting platforms.

**HTTPS**: similar to HTTP but encrypted. Third parties can't read the files being transferred.

**SSH**: allows us to communicate between two computers over the internet. It allows users to share files as well as **modify remote computers over the internet**.

SSH was created as a secure way of communication which **encrypts all the data**.

## HTTPS vs SSH

They're both a form of communication and they're both encrypted but...

**HTTPS** is used by **web browsers** to talk with servers at display websites.

**SSH** is used by **shells** to exchange data between two devices (not just a browser and a server).

```
ssh {user}@{host}
ssh root@167.99.146.57
```

## How SSH works

**Encryption**: is a way of jumble up a piece of text into something that it's impossible for a third party to read without a way to decrypt it.

**Symmetric Encryption**: uses **one secret key** for both the encryption and decryption by both parties.

**Key Exchange Algorithm**: a secure way to exchange these keys without any bad actors intercepting it. **What makes this algorithm particularly secure is the fact that the key is never actually transmitted between the client and the host.** Instead, the two computers share public pieces of data and then manipulate it to independently calculate the secret key.

If a third party captures the publicly shared data it won't be able to calculate the key because it doesn't know the **key exchange algorithm**.

**Asymmetrical Encryption**: uses **two separate keys for encryption and decryption**.

Each party have a **key pair** (a public key and a private key).

* The private key cannot mathematically compute from the public key.
* A message encrypted by a machine public key **can only be decrypted** by the same machine private key.   

So, if A wants to send a private message to B, A requests the public key of B. Then A encrypt the message using the B public key and sends the encrypted message. Finally, B receives the message encrypted with its own public key, so it can decrypted using its private key.

## Great... but what about SSH :confused:

SSH only uses asymmetrical encryption during the key exchange algorithm of symmetric encryption.

With SSH, before we initiate a secure connection, both parties generate temporary public and private keys and share their respective keys to one another. Then, an identical symmetric key is generated by both parties (in its private space) using the **Diffie Helmann key exchange algorithm**. Therefore a private session is stablished using this symmetric key.

**The Diffie Hellmann key exchange algorithm** uses a bit of public and private information (got it from public and private keys) to generate the symmetric key which it's never exchanged! Besides the name of the algorithm. :stuck_out_tongue:

**So, SSH uses asymmetric encryption to share the symmetric key through which communication will take place.**
